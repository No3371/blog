<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>#</title>
 <link href="/blog/atom.xml" rel="self"/>
 <link href="https://no3371.github.io/blog/"/>
 <updated>2021-09-23T03:32:16+00:00</updated>
 <id>https://no3371.github.io</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
   
 
   
   <entry>
     <title>Learning C#: Bit-Twiddling-Abs</title>
     <link href="https://no3371.github.io/blog/posts/learning-csharp-bittwiddling/en"/>
     <updated>2021-08-26T00:00:00+00:00</updated>
     <id>https://no3371.github.io/posts/learning-csharp-bittwiddling/learning-csharp-bittwiddling</id>
     <content type="html">&lt;p&gt;NOTE: C# numbers are stored in 2’s complement.&lt;/p&gt;

&lt;p&gt;We’ll use int (32bit) P = 17 (&lt;code class=&quot;highlighter-rouge&quot;&gt;0000 0000 0000 0000 0000 0000 0001 0001&lt;/code&gt;) and N = -17 (&lt;code class=&quot;highlighter-rouge&quot;&gt;1111 1111 1111 1111 1111 1111 1110 1111&lt;/code&gt;) to demonstrate.&lt;/p&gt;

&lt;h3 id=&quot;extract-the-sign-bit&quot;&gt;Extract the sign bit&lt;/h3&gt;

&lt;p&gt;We shift 32 bits right to get the sign bit:&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step1N&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// = -1, 1111 1111 1111 1111 1111 1111 1111 1111&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step1P&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// = 0,  0000 0000 0000 0000 0000 0000 0000 0000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;xor-the-original-value-and-the-mask&quot;&gt;XOR the original value and the mask&lt;/h3&gt;

&lt;p&gt;XOR means output 1 if the bits are different.&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step2N&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step1N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The leftmost bit of -17 is 1, the the one of step1N is also 1, they are the same, so the XOR result bit would be 0, which makes the value positive.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// After XOR, step2N is now `0000 0000 0000 0000 0000 0000 0001 0000`, which is 16&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step2P&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step1P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The leftmost bit of 17 is 0, the the one of step1P is also 0, they are the same, so the XOR result bit would be 0, which is not changed (17 is positive too).&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// After XOR, step2P is now `0000 0000 0000 0000 0000 0000 0001 0001`, which is 17&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;subtact-the-step2-values&quot;&gt;Subtact the step2 values&lt;/h3&gt;

&lt;p&gt;We need to adjust the value for N to makes the abs result correct.&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step2N&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step1N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// = 17, 16 - -1&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;absP&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step2P&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step1P&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// = 17, 17 - 0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// As you can see, this step does not modify the result if the original value is positive.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;not-safe-intminvalue&quot;&gt;Not Safe: int.MinValue&lt;/h3&gt;

&lt;p&gt;Let’s perform the above technique for &lt;code class=&quot;highlighter-rouge&quot;&gt;int.MinValue&lt;/code&gt;, -2147483648, which is &lt;code class=&quot;highlighter-rouge&quot;&gt;1000 0000 0000 0000 0000 0000 0000 0000&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2147483648&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -1, 1111 1111 1111 1111 1111 1111 1111 1111&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2147483648&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The leftmost bit of -17 is 1, the the one of step1N is also 1, they are the same, so the XOR result bit would be 0, which makes the value positive.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// After XOR, x is now 0111 1111 1111 1111 1111 1111 1111 1111, which is 2147483647, the `int.MaxValue`&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// it's supposed to be 2147483647+1, but 2147483647 is already `int.MaxValue`, this will results in a overflow, makes it again -2147483648.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So if the value is possibliy &lt;code class=&quot;highlighter-rouge&quot;&gt;int.MinValue&lt;/code&gt;, we have to avoid using this trick.&lt;/p&gt;

&lt;p&gt;Also, this does not necessarily makes your program faster because modern compiler is good at optimization, it’s often faster then manual optimization.&lt;/p&gt;
</content>
   </entry>
   
 
   
 
   
 
   
 
   
 
   
 
   
 

</feed>